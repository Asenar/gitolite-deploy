#!/bin/bash
#
# file : serveur-prod:/home/git/scripts/deploy
# desc : This script deploy a pushed branch in web directory specified in conf/$repo-name.conf
#
# author : MichaÃ«l Marinetti
# creation : 2012-09-07
# modified : 2013-01-24
#
# LOG
#
# 2012-10-02
# now aborting if some files are not commited
# 2012-10-05
# better informations
# 2012-10-08
# add git show HEAD and git status --short --branch to show diverged information
# 2012-10-08
# rm git show, add git log -n1
# 2012-10-23
# now cancel if branch has diverged
# 2013-01-24
# change variable names
#

branch=$1
repo_name=$2

if (test -z "$repo_name" ) then
  echo "repo_name is missing oO"
  exit 1
fi

tmp_file_content=$(mktemp)

#################################

# list of updatable directories, relative to their branch
source `dirname "$0"`/conf/$repo_name.conf
if (test -n "${dirs[$branch]}" -o -n "${dirs['all']}") then
        do_update=1
        if (test -n "${dirs[$branch]}") then
                dir=${dirs[$branch]}
                echo "<p>path '$dir' will be updated.</p>" >> $tmp_file_content
        else
                dir=${dirs['all']}
                echo "<p>path '$dir' will be updated if the branch correponds.</p>" >> $tmp_file_content
        fi
else
        do_update=0
        echo "<p>No path to update has been found (either branch '$branch' is not configured, and 'all' param is empty).</p>" >> $tmp_file_content
fi


if (test -n "$dir") then
        cd $dir
        unset GIT_DIR
        git_status_branch="$(git status --branch --short)"
        fetch_origin=$(git fetch origin)
        last_err=$?
        behind_or_ahead="$(echo $git_status_branch|grep "ahead\|behind")"
        git_status_branch_humanreadable="<p>git status --branch --short<br/>$git_status_branch</p>"

        branch_to_update=$branch
        current_branch=$(git symbolic-ref HEAD 2>/dev/null)
        current_branch=${current_branch#refs/heads/}
        if (test $last_err -ne 0) then
                echo "<p style='color:red;font-weight:bold'>ERROR on git fetch origin</p>" >> $tmp_file_content
        else
                if (test "$current_branch" = "$branch_to_update") then
                        if (test -n "$fetch_origin" ) then
                                echo "<br/>fetch origin result: <br/>$fetch_origin</pre>" >> $tmp_file_content
                        fi
                        count_status=$(git st --porcelain|wc -l)
                        git_show_head="<p>git show HEAD</p><pre> $(git log -n1 --pretty=medium) </pre>"
                        if (test $count_status -gt 0) then
                                echo "<p style='color:orange;'>working directory is not clean. You need to commit all changes and remove untracked files.<br/><b>pull aborted</b></p>" >> $tmp_file_content
                        else
                                if (test -n "$behind_or_ahead") then
                                        echo "<p style='color:red;font-weight:bold'>CANCELLED : branch has diverged</p>" >> $tmp_file_content
                                        echo "$git_status_branch_humanreadable" >> $tmp_file_content
                                else
                                        if (test $last_err -eq 0) then
                                                git reset --hard origin/$branch > /dev/null
                                                last_err=$?
                                                if ( test $last_err -ne 0 ) then
                                                        echo "<p style='color:red;font-weight:bold'>ERROR on git reset --hard origin/$branch</p>" >> $tmp_file_content
                                                else
                                                        echo "<p style='color:green;font-weight:bold'>MAJ OK</p>" >> $tmp_file_content
                                                fi
                                        fi
                                fi
                        fi
                        echo "<small>" >> $tmp_file_content
                        echo "$git_show_head" >> $tmp_file_content
                        echo "</small>" >> $tmp_file_content
                else
                        echo "<p style='color:orange;font-weight:bold'>MAJ SKIPPED (branch used=$current_branch instead of $branch_to_update)</p>" >> $tmp_file_content
                        echo "<hr/>" >> $tmp_file_content
                fi
        fi
fi
cat $tmp_file_content
rm $tmp_file_content
