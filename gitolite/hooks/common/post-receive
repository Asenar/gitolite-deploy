#!/bin/bash
#
# file : gitolite:/home/bin/repository/myrepo/hooks/post-receive
#        https://gist.github.com/Asenar/4621684
# desc : This hooks will update a git repository (with git pull) after you "git push"
# from your local workstation
#
# author : Michaël Marineti
# creation : 2012-09-21
# modified : 2013-07-29
#
# LOG
# 2012-09-26 : 
#   a branch other than master can be updated
# 2012-10-05 :
#   improving things, with the remote scripts
# 2013-01-24 :
#   rename variables / english speaking 
# 2013-06-19 :
#   loop for each configuration key
#   replaced "git reset --hard" by "git merge --ff-only --commit origin/$branch
#   less output, better output
#   use git merge-base --is-ancestor for diverged/ornot branch
#   use "git diff --name-only" for modified files
#   use "git ls-files -o" for untracked files
#   better html/css/styles
# 2013-06-20 :
#  bugfix dir in loop no longer missing
# 2013-07-09 :
#   colors in remote informations
#  ZERO for the "zero sha1"
#  functions info, warning, notice, success, fail
#  Added config file for email sender and dest
#  More info displayed in console
#  handling tags like new branch but better
# 2013-07-10 :
#  no more errors when pushing tags or deleting tags/branches :)
#  changed some IFs into some CASEs
#  better email subject
# 2013-07-17 :
#  add pusher/commiter/author infos
# 2013-07-29 :
#  untracked file list skips ignored files
#  improve mail
#  add warning in console
# 2013-08-14 :
#  var lowercase
#  less multiple if/else, using continue instead
#  mail notification display GITOLITE first, and deploy information last
#  remote is still origin, but is now configurable
#  no more fieldset for so few informations
#  less info/notice/warn/error in terminal output
#
# INSTALLATION
#
# localhost: local (developer)
# devhost: used for preprod and gitolite
#
# cd /home/www/dev.mywebsite.com
# git clone /home/git/repositories/mywebsite.com
#
# - put that file in /home/git/.gitolite/hooks/common to handle every repositories :)
#
# The "post-receive" script is run after receive-pack has accepted a pack
# and the repository has been updated.  It is passed arguments in through
# stdin in the form
#  <oldrev> <newrev> <refname>
# For example:
#  aa453216d1b3e49e7f6f98441fa56946ddcd6a20 68f7abf4e6f922807889f52bc043ecd31b79f814 refs/heads/master
# note michael : delete a branch have some problems
#remote: fatal: Invalid revision range 87187a0205f5a1d8d93bca73de40d69e8b338a99..0000000000000000000000000000000000000000
#remote: fatal: bad object 0000000000000000000000000000000000000000
# - [deleted]         testvide

# send me bug reports

####################################################
# set -x  # debug mode

zero="0000000000000000000000000000000000000000"
# some functions to put in a library later
error () {
	printf "\r  [\033[00;31m✗_✗ \033[0m] $1\n"
}
warning () {
	printf "\r  [\033[00;33mWARN\033[0m] $1\n"
}
notice () {
	printf "\r  [\033[00;34mINFO\033[0m] $1\n"
}
info () {
	printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}
success () {
	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}
fail () {
	printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
	echo ''
	exit 1
}
####################################################
# TODO : put that in /etc/gitolite-deploy.conf or something
deploy_config_dir="/data/git/deploy/conf"

default_remote_name="origin"

remote_name=${default_remote_name}
if [ -f "$deploy_config_dir/config" ]; then
	# local deploy
	# echo "local deploy"
	source $deploy_config_dir/config
else
	notice "please create '$deploy_config_dir/config' containing :"
	echo "#!/bin/bash"
	echo "from=sender@yourdomain.com"
	echo "to=dest@yourdomain.com,user2@yourdomain.com"
	echo "remote_name=origin"
	echo ""
	fail "Unable to continue without that configuration file."
fi

if [[ -z "$from" ]] || [[ -z "$to" ]]; then
	notice "please create '$deploy_config_dir/config' containing :"
	echo "#!/bin/bash"
	echo "from=sender@yourdomain.com"
	echo "to=dest@yourdomain.com,user2@yourdomain.com"
	echo "remote_name=origin"
	echo ""
	fail "Unable to continue without that configuration file."
fi

read oldrev newrev refname

pusher=${GL_USER}
repository_root_dir="/data/git/repositories/"
if [ $(git rev-parse --is-bare-repository) = true ]
then
	repository_basename="${PWD#$repository_root_dir}"
else
	repository_basename="$(basename $(readlink -nf "$PWD"/..))"
fi
repo_name=${GL_REPO}
# repo_name="${repository_basename%.git}"
# TODO : handle cases like refs/tags/0.1
branch="${refname#refs/heads/}"
# that can be a tag?
tag="${refname#refs/tags/}"

# echo "check prod ..."
# tmp_content=$(ssh serveur-prod scripts/deploy $branch $repo_name)
# echo "done."
# echo "<h3>prod PUSH RESULT</h3>" >> $tmp_file_content
# echo "$tmp_content" >> $tmp_file_content
# echo "<hr/>" >> $tmp_file_content
##### START LOCAL DEPLOY SCRIPT #####
if [ -z "$repo_name" ]; then
	fail "repo_name is missing oO"
fi

if [ -f "$deploy_config_dir/$repo_name.conf" ]; then
	# local deploy
	# echo "local deploy"
	source $deploy_config_dir/$repo_name.conf
else
	warning "no configuration file found for deployment."
	warning "create $deploy_config_dir/$repo_name.conf to avoid this message"
fi

# mail headers
tmp_file_headers=`mktemp`
# content email <head>
tmp_file_start=`mktemp`
tmp_file_content=`mktemp`
# fill tmp_file_content at the end of each loop
tmp_loop_content=`mktemp`
echo "<html><head><title>gitolite push report</title>" >> $tmp_file_start
echo "<style>" >> $tmp_file_start
echo "body{font-family:Inconsolata,'Source Code Pro', DejaVu, Tahoma, courier}.ok,.warn,.error{font-weight:bold}" >> $tmp_file_start
echo "p{margin:5px;}.error{color:red;}.info{color:#0077cc;}.warn{color:orange}.ok{color:green}" >>$tmp_file_start
echo "h1,h2,h3{margin:5px;}.loop-title{font-weight:bold;font-size:16px}" >> $tmp_file_start
echo "</style>" >> $tmp_file_start
echo "</head><body>" >> $tmp_file_start
num_dir=${#dirs[@]}


for each_config_key in ${!dirs[@]}; do
	# reset file tmp_loop_content
	:> $tmp_loop_content
	dir=${dirs[$each_config_key]}
	if [[ "$branch" = "$each_config_key" ]] || [[ "$each_config_key" = "all" ]]; then
		echo "<fieldset><legend class='loop-title'>${dir}@${each_config_key}</legend>" >> $tmp_loop_content
		do_update=1

		#if [ "$each_config_key" = "all" ]; then
		#	info "configuration found for '$dir' : update for any branch (key @all)."
		#else
		#	info "configuration found for '$dir': update for branch '$branch' only"
		#fi
	else
		echo "<fieldset><legend class='loop-title'>[NOTICE] $dir@$each_config_key will not be updated</legend>" >> $tmp_loop_content
		do_update=0
	fi
	if [ -n "$dir" ]; then
		cd $dir
		unset GIT_DIR
		git_status_branch="$(git status --branch --short)"
		if [[ -d ".git/logs/refs/remotes/${remote_name}" ]] && ! [[ -w ".git/logs/refs/remotes/${remote_name}" ]]; then
			error ".git/logs/refs/remotes/${remote_name} (in $dir) is not writable. Unable to fetch"
			echo "<p class='error'>" >> $tmp_file_content
			echo "<b>.git/logs/refs/remotes/${remote_name}</b> (in $dir) is not writable. Unable to fetch<br/>" >> $tmp_file_content
			echo "Error in $dir on branch $current_branch will not be updated</p>" >> $tmp_file_content
			continue
		fi

		# debug mode
		# set -x
		fetch_origin=$(git fetch ${remote_name} 2>&1)
		# set +x
		last_err=$?
		if [ "$last_err" -gt 0 ]; then
			error "oO error on git fetch ${remote_name} (write perms in .git ? ) ? ErrorCode=$last_err"
			error "$fetch_origin"
			echo "<p class='error'>" >> $tmp_file_content
			echo "<b>.git/logs/refs/remotes/${remote_name}</b> (in $dir) is maybe not fully writable by <b>git</b>.<br/>" >> $tmp_file_content
			echo "<b>OR </b> the readonly user is not allowed to read (check gitolite config).<br/><br/>" >> $tmp_file_content
			echo "Unable to fetch origin :<pre>${fetch_origin}</pre>" >> $tmp_file_content
			echo "Error in $dir on branch $current_branch will not be updated</p>" >> $tmp_file_content
			continue;
		fi
		# it's a branch update
		case $refname in 
			refs/heads/*)
				is_ancestor="$(git merge-base --is-ancestor HEAD ${remote_name}/$branch; echo $?)"
				if [ "$is_ancestor" -eq 0 ]; then
					is_ancestor=true
				else
					is_ancestor=
				fi
				has_modified_files="$(git diff --quiet || echo 1)"
				has_untracked_files="$(git ls-files -o --exclude-standard | grep >/dev/null . && echo 1 || echo '')"
				# better way to check if it's ancestor :
				git_status_branch_humanreadable="<p>git status --branch --short<br/>$git_status_branch</p>"

				branch_to_update=$branch
				current_branch=$(git symbolic-ref HEAD 2>/dev/null)
				current_branch=${current_branch#refs/heads/}
				if [[ "$current_branch" != "$branch_to_update" ]]; then
					notice "path '$dir' has not been updated (branch is $current_branch instead of $branch_to_update)."
					echo "<p class='info'>path '$dir' skipped ! (@$current_branch instead of $branch_to_update)</p>" >> $tmp_file_content
					continue;
				fi
				if [[ -n "$fetch_origin" ]]; then
					echo "<p>git fetch ${remote_name}<pre>$fetch_origin</pre></p>" >> $tmp_loop_content
				fi
				#git_show_head="<p style='font-weight:bold'>git show HEAD</p><pre> $(git log -n1 --pretty=medium) </pre>"
				# CANCEL#1 - because has modified or untracked
				if [ "$has_modified_files" -o "$has_untracked_files" ]; then
					echo "<p class='error'>working directory is not clean." >> $tmp_loop_content
					echo "You need to commit all changes and remove untracked files.</p>" >> $tmp_loop_content
					warning "path '$dir' : deploy aborted : directory is not clean (file modified or untracked present)" 
					info "to manually deploy, please do the following in $dir:"
					echo "1 - get last references"
					echo "* git fetch ${remote_name} $branch"
					echo "2 - try a safe fast-forward merge"
					echo "* git merge --ff --ff-only ${remote_name}/$branch"
					echo "3 - if 2° didn't worked, have to update manually : "
					echo "3-1 set the references to ${remote_name}/$branch"
					echo "* git reset --soft ${remote_name}/$branch"
					echo "3-1 use 'git reset -p', 'git checkout path/to/file', 'git difftool' to compare and restore files safely" 
					echo "** git checkout path/to/file-i-m-sure-the-HEAD-is-ok"
					echo "** git difftool path/to/file-i-want-to-compare-with-a-tool-like-vimdiff"
					echo "** git reset -p path/to/file-i-wan-to-reset-changes-by-changes"
					echo "<b>pull aborted</b>" >> $tmp_loop_content
					if [ $has_modified_files ]; then
						echo "<fieldset><legend class='error' >has modified files</legend><pre>" >> $tmp_loop_content
						# or git diff --name-only"
						echo "$(git diff --stat)" >> $tmp_loop_content
						echo "</pre></fieldset>" >> $tmp_loop_content
					fi
					if [ $has_untracked_files ]; then
						echo "<fieldset><legend class='error'>has untracked files</legend><pre>" >> $tmp_loop_content
						echo "$(git ls-files -o --exclude-standard  )" >> $tmp_loop_content
						echo "</pre></fieldset>" >> $tmp_loop_content
					fi
					echo '</fieldset>' >> $tmp_loop_content
					cat $tmp_loop_content >> $tmp_file_content
					continue;
				fi
				# CANCEL#2 - because current HEAD is not ancestor
				if [ -z "$is_ancestor" ]; then
					error "path '$dir' : branch is not ancestor($is_ancestor). something need to be done"
					info "git status : ${git_status_branch_humanreadable}"
					echo "<p class='error'>CANCELLED : branch is not ancestor($is_ancestor) (maybe it's in the future, or has diverged)</p>" >> $tmp_loop_content
					echo "$git_status_branch_humanreadable" >> $tmp_loop_content
					echo '</fieldset>' >> $tmp_loop_content
					cat $tmp_loop_content >> $tmp_file_content
					continue;
				fi
				# TODO : replace that by "if can-do-fast-forward"
				# MERGE : $(git merge --ff-only` to attempt the ff)
				# JUST CHECKS : $(git merge-base --is-ancestor HEAD HEAD@{u}; echo $?)

				# CANCEL#3 - because that's not the correct branch
				if [ "$do_update" -eq 0 ]; then
					info "no update (wrong branch) for dir $dir"
					continue;
				fi

				notice "using 'git merge --ff-only --commit ${remote_name}/$branch' to deploy ..."
				merge_result=$(git merge --ff-only --commit ${remote_name}/$branch 2>&1)
				#			 merge_result=$(sudo -u www-data git merge --ff-only --commit ${remote_name}/$branch 2>&1)
				last_err=$?
				# show maj OK/ERROR at the top
				if [ $last_err -gt 0 ]; then
					error "Merge error for path '$dir' "
					info "$merge_result"
					echo "<p class='error'>ERROR on git merge --ff-only --commit ${remote_name}/$branch" >> $tmp_loop_content
					echo "Maybe only half files has been updated" >> $tmp_loop_content
					echo "<pre>" >> $tmp_loop_content
					echo "$merge_result</pre></p>" >> $tmp_loop_content

					# show an informative message
					msg_need_reset="You may need to restore '$dir' with 'git reset --hard' or simply set correct permissions"
					echo "<p class='error'>$msg_need_reset</p>" >> $tmp_loop_content
					error "$msg_need_reset"

					# do the reset automatically
					# reset_result=$(git reset --hard $oldrev 2>&1)
					# reset_err=$?
					# echo "<p class='error'>RESTORED WITH git reset --hard<pre>" >> $tmp_loop_content
					# if [ $reset_err -gt 0 ]; then
					# 	notice "Operation cancelled (git reset --hard $oldrev)"
					# else
					# 	error "ERROR on git reset --hard $oldrev"
					# fi
					# info "$reset_result"
					# echo "$reset_result</pre></p>" >> $tmp_loop_content
				else
					success "Merge done for path '$dir' "
					echo "<p class='ok'>SUCCESS on git merge --ff-only --commit ${remote_name}/$branch<pre>" >> $tmp_loop_content
					echo "$merge_result</pre></p>" >> $tmp_loop_content
				fi
				#echo "<small>" >> $tmp_loop_content
				#echo "$git_show_head" >> $tmp_loop_content
				#echo "</small>" >> $tmp_loop_content
				;;
			refs/tags/*)
				echo "Nothing done when pushing tags"
				;;
			*)
				echo "not a tag, not a branch, so what is that ???"
				;;
		esac
	fi
	##### STOP LOCAL DEPLOY SCRIPT #####
	cat $tmp_loop_content >> $tmp_file_content
	echo '</fieldset>' >> $tmp_file_content
done



################## SEND THAT EVERYTIME #############
echo "<fieldset><legend class='ok'>GITOLITE</legend><p>pushed by $pusher</p>" >> $tmp_file_start
if [[ "$oldrev" = "$zero" ]] || [[ "$newrev" = "$zero" ]]; then
	case $refname in 
		refs/heads/*)
			if [[ "$newrev" = "$zero" ]]; then
				echo "<p>branch <b>$refname</b> has been deleted" >> $tmp_file_start
				email_title="branch '$branch' deleted"
			else
				echo "<p>new branch <b>$refname</b> pushed and set to <b>$newrev</b>" >> $tmp_file_start
				email_title="new branch '$branch' created"
			fi
			;; 
		refs/tags/*) 
			echo "<p>new tag <b>$refname</b> pinned at <b>$newrev</b>" >> $tmp_file_start
			if [[ "$newrev" = "$zero" ]]; then
				email_title="tag '$tag' deleted"
			else
				email_title="TAG '$tag' created"
				echo "<p>Dear maintainer, can you please update the server to the tag ${tag} ?</p>" >> $tmp_file_start
			fi
			;; 
		*) 
			echo "random ref <b>$refname</b> has been ... wait, what ?" >> $tmp_file_start
			email_title="random ref '$refname' created"
			;;
	esac
else
	echo "<p><b>$refname</b> has been updated (from <b>$oldrev</b> to <b>$newrev</b>) </p>" >> $tmp_file_start
	email_title="branch '$branch' updated"
fi
if [[ -n "$oldrev" ]] && [[ "$oldrev" != "$zero" ]] && [[ "$newrev" != "$zero" ]]; then
	echo "<p>commit logs:<br/><pre>" >> $tmp_file_start
	git log --pretty=oneline --abbrev-commit $oldrev..$newrev | sed "s#\n#<br/>#" >> $tmp_file_start
	echo "</pre></p>" >> $tmp_file_start
fi
if [[ "$newrev" != "$zero" ]]; then
	author="$(git --no-pager show $newrev -s --format='%an')"
	# commiter=$(git --no-pager show -s --format='%cn <%ce>')
	echo "<p class='info'>last commit details ($author): <pre>" >> $tmp_file_start
	git show $newrev |sed -e "s#<#\&lt;#g" -e "s#>#\&gt;#g" -e "s#\n#<br/>#" >> $tmp_file_start
	echo "</pre></p>" >> $tmp_file_start
else
	author="$pusher"
fi
echo "</fieldset>" >> $tmp_file_start
######################################################
echo "</body></html>" >> $tmp_file_content


### mail content ###
subject="[repo $repo_name] $email_title (by $author)"

echo "<p>author = $author, pusher = $pusher </p>" >> $tmp_file_start
if [ "$num_dir" -gt 0 ]; then
	echo "<hr/><p>$num_dir directories found in config (to potentially update them)</p>" >> $tmp_file_start
else
	echo "<hr/><p>no directory found in config file. This is just a log report</p>" >> $tmp_file_start
fi
### mail headers ###
echo "From: $from" >> $tmp_file_headers
echo "To: $to" >> $tmp_file_headers
echo "Subject: $subject" >> $tmp_file_headers
echo "Content-Type: text/html; charset=UTF-8" >> $tmp_file_headers
mail_content="$(cat $tmp_file_headers $tmp_file_start $tmp_file_content)"
echo "$mail_content" | /usr/sbin/sendmail -t 

info "notification mail sent to $to"

rm $tmp_file_content $tmp_file_headers $tmp_file_start $tmp_loop_content

exit 0

