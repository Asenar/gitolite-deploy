#!/bin/bash
#
# file : gitolite:/home/bin/repository/myrepo/hooks/post-receive
# desc : This hooks will update a git repository (with git pull) after you "git push"
# from your local workstation
#
# author : MichaÃ«l Marineti
# creation : 2012-09-21
# modified : 2013-01-24
#
# LOG
# 2012-09-26 : a branch other than master can be updated
# 2012-10-05 : improving things, with the remote scripts
# 2013-01-24 : rename variables / english speaking 
#
# INSTALLATION
#
# localhost: local (developer)
# devhost: used for preprod and gitolite
#
# cd /home/www/dev.mywebsite.com
# git clone /home/git/repositories/mywebsite.com
#
# - put that file in /home/git/repositories/mywebsite.com/hooks/post-receive
#
# The "post-receive" script is run after receive-pack has accepted a pack
# and the repository has been updated.  It is passed arguments in through
# stdin in the form
#  <oldrev> <newrev> <refname>
# For example:
#  aa453216d1b3e49e7f6f98441fa56946ddcd6a20 68f7abf4e6f922807889f52bc043ecd31b79f814 refs/heads/master
# note michael : delete a branch have some problems
#remote: fatal: Invalid revision range 87187a0205f5a1d8d93bca73de40d69e8b338a99..0000000000000000000000000000000000000000
#remote: fatal: bad object 0000000000000000000000000000000000000000
# - [deleted]         testvide

# send me reports
from=git@hostname.com
to=myself@hostname.com

read oldrev newrev refname

# use for choosing correct conf file on remote server
# TODO: make it automatic
repo_name=my-repo-name

branch=${refname#refs/heads/}


tmp_file_headers=`mktemp`
tmp_file_content=`mktemp`

echo "Analyze front ..."
tmp_content=$(ssh serveur-prod scripts/deploy $branch $repo_name)
echo "done."
echo "<h3>prod PUSH RESULT</h3>" >> $tmp_file_content
echo "$tmp_content" >> $tmp_file_content
echo "<hr/>" >> $tmp_file_content


################## SEND THAT EVERYTIME #############
echo "<h4>TECHNICAL INFOS</h4>" >> $tmp_file_content
echo "<p><b>$refname</b> has been updated (from <b>$oldrev</b> to <b>$newrev</b>) </p>" >> $tmp_file_content
echo "<p>commit log:<br/>" >> $tmp_file_content
if (test -n "$oldrev") then
git log --pretty=oneline --abbrev-commit $oldrev..$newrev | sed "s#\n#<br/>#" >> $tmp_file_content
fi
echo "</p>" >> $tmp_file_content
echo "<p>last commit details: <pre>" >> $tmp_file_content
git show $newrev --oneline | sed "s#\n#<br/>#" >> $tmp_file_content
echo "</pre></p>" >> $tmp_file_content
######################################################


### mail content ###
subject="[DEPLOY $repo_name $branch] `date` - push result "

### mail headers ###
echo "From:$from" >> $tmp_file_headers
echo "To:$to" >> $tmp_file_headers
echo "Subject:$subject" >> $tmp_file_headers
echo "Content-Type: text/html; charset=UTF-8" >> $tmp_file_headers
mail_complet="$(cat $tmp_file_headers $tmp_file_content)"
echo "$mail_content" | sendmail -t

rm $tmp_file_content $tmp_file_headers

exit 0
